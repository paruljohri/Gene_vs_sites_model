//multiple-site two nucleotide model
//A is the ancestral WT allele denoted by 0
//C is the derived selected allele denoted by 1
//Equal mutation rate between the two
//3 different fitness models
//We calcualte the 1) variance in fitness between individuals in the whole population, 2) genetic load = 1.0 - mean fitness of the population, 3) inbreeding load = mean fitness - fitness of 100 inbred individuals sampled from the population4) inbreeding load = mean fitness of 100 diploid individuals - fitness of 100 inbred individuals sampled from the population
//Different mutation rates of Nu=1 and Nu=0.1 will be tried
//Parameters here: -d d_mut_rate -d d_rec_rate -d d_num_sites
//output is just the allele frequency and load statistics
//in addition, we will output all neutral and selected SNPs separately in ms files
//And we will incorporate a DFE instead of fixed gamma
//In this script I'm modifying the fitness functions to be more efficient.

function (string)write_ms_file(object sampled_genomes, string f_m1, string f_m2)
    {
    writeFile(filePath=f_m1, contents="//", append = F);
    writeFile(filePath=f_m2, contents="//", append = F);
    // get the unique mutations in the sample, sorted by position
    m_m1 = sortBy(unique(sampled_genomes.mutationsOfType(m1)), "position");
    m_m2 = sortBy(unique(sampled_genomes.mutationsOfType(m2)), "position");
    // print the number of segregating sites
    writeFile(filePath=f_m1, contents=paste("segsites: " + size(m_m1)), append = T);
    writeFile(filePath=f_m2, contents=paste("segsites: " + size(m_m2)), append = T);

    // print the positions
    positions_m1 = format("%.15f", m_m1.position / sim.chromosome.lastPosition);
    positions_m2 = format("%.15f", m_m2.position / sim.chromosome.lastPosition);
    writeFile(filePath=f_m1, contents="positions: " + paste(positions_m1, sep=" "), append = T);
    writeFile(filePath=f_m2, contents="positions: " + paste(positions_m2, sep=" "), append = T);
    
    // print the sampled genomes
    for (genome in sampled_genomes)
        {
        hasMuts_m1 = (match(m_m1, genome.mutations) >= 0);
        writeFile(filePath=f_m1, contents=paste(asInteger(hasMuts_m1), sep=""), append = T);
        hasMuts_m2 = (match(m_m2, genome.mutations) >= 0);
        writeFile(filePath=f_m2, contents=paste(asInteger(hasMuts_m2), sep=""), append = T);
        }
    return (paste(f_m1, "and", f_m2, "written", sep=" "));                                    
    }

function (float)get_mean_variance_fitness(object subpop)
	{
	v_fitness = c();
	for (ind in subpop.individuals){
		hap1 = ind.genome1.nucleotides(0, L-1, format="integer");//A:0; C:1; G:2; T:3
		hap2 = ind.genome2.nucleotides(0, L-1, format="integer");
		if (fitness_model=="multiplicative"){v_fitness = c(v_fitness, multiplicative_fitness(hap1, hap2));}
		else if (fitness_model=="additive_site"){v_fitness = c(v_fitness, additive_site_fitness(hap1, hap2));}
		else if (fitness_model=="additive_gene"){v_fitness = c(v_fitness, additive_gene_fitness(hap1, hap2));}
		}
	return(c(mean(v_fitness),var(v_fitness)));
	}

function (float)get_mean_fitness_of_sample(object sample_of_individuals)
        {
        v_fitness = c();
        for (ind in sample_of_individuals){
                hap1 = ind.genome1.nucleotides(0, L-1, format="integer");//A:0; C:1; G:2; T:3
                hap2 = ind.genome2.nucleotides(0, L-1, format="integer");
                if (fitness_model=="multiplicative"){v_fitness = c(v_fitness, multiplicative_fitness(hap1, hap2));}
                else if (fitness_model=="additive_site"){v_fitness = c(v_fitness, additive_site_fitness(hap1, hap2));}
                else if (fitness_model=="additive_gene"){v_fitness = c(v_fitness, additive_gene_fitness(hap1, hap2));}
                }
        return(mean(v_fitness));
        }

function (float)get_inbred_fitness(object subgenomes)
	{
	v_fitness = c();
	for (genome in subgenomes){
		hap1 = genome.nucleotides(0, L-1, format="integer");//A:0; C:1; G:2; T:3
		hap2 = hap1; //artifically making the individual be inbred
		if (fitness_model=="multiplicative"){v_fitness = c(v_fitness, multiplicative_fitness(hap1, hap2));}
		else if (fitness_model=="additive_site"){v_fitness = c(v_fitness, additive_site_fitness(hap1, hap2));}
		else if (fitness_model=="additive_gene"){v_fitness = c(v_fitness, additive_gene_fitness(hap1, hap2));}
		}
	return(mean(v_fitness));
	}


function (float)additive_gene_fitness(integer hap1, integer hap2)
	{
		num_mutant_hap1 = size(strsplit(paste(hap1, sep=""), "1"))-1;
		num_mutant_hap2 = size(strsplit(paste(hap2, sep=""), "1"))-1;
		//get a vector with information on whether genotypes are heterozygous(1), homozygous for mutants (2) or homozygous for A/WT (0)
		posn=0;
		v_state = c();
		v_sel_C = c();
		num_mutant_indv = 0;
		hap1_sub = c();
		hap2_sub = c();
		while(posn<L){
			if(hap1[posn]==1 | hap2[posn]==1){ //has a C in at one of the two bases
				num_mutant_indv = num_mutant_indv + 1;
				hap1_sub = c(hap1_sub, hap1[posn]);//store it in a sub haplotype
				hap2_sub = c(hap2_sub, hap2[posn]);//store it in a sub haplotype
				if (hap1[posn]==1 & hap2[posn]==1){ //CC
					v_state = c(v_state, 2);
					v_sel_C = c(v_sel_C, s_C[posn]);
				}
				else{ //AC or CA
					v_state = c(v_state, 1);
					v_sel_C = c(v_sel_C, s_C[posn]);
				}
			}
			posn = posn + 1;
		}
		//print(num_mutant_hap1);
		//calcualte the direct fitness cost:
		if (num_mutant_hap1==0 & num_mutant_hap2==0){
			fitness_gene=1.0;
		}
		if (num_mutant_hap1==0 & num_mutant_hap2 > 0){
			fitness_gene=1.0;
			posn = 0;
			while(posn<num_mutant_indv){
				if (hap2_sub[posn] == 1){fitness_gene = fitness_gene + v_sel_C[posn]*dominance;}//if there is a mutant in haplotype 2, account for the decrease in fitness
				posn = posn + 1;
			}
		}
		if (num_mutant_hap1 > 0 & num_mutant_hap2==0){//only haplotype 1 has a mutant
			fitness_gene=1.0;
			posn=0;
			while (posn < num_mutant_indv){
				if (hap1_sub[posn]==1){fitness_gene = fitness_gene + (v_sel_C[posn]*dominance);}//only take the fitness values from positions where haplotype 1 has a mutant
				posn = posn + 1;
			}
		}
		if (num_mutant_hap1 > 0 & num_mutant_hap2 > 0){
			fitness_gene = 1.0;
			posn = 0;
			while (posn < num_mutant_indv){
				if (hap1_sub[posn]==1){fitness_gene = fitness_gene + (0.5*v_sel_C[posn]);}
				if (hap2_sub[posn]==1){fitness_gene = fitness_gene + (0.5*v_sel_C[posn]);}
				posn = posn + 1;
			}
		}
		//calcualte the epistasis coefficient:
		//calculate pairwise interactions only for sites with mutants
		epi_coeff = 0.0;
		if (num_mutant_hap1==0 | num_mutant_hap2==0){ //all mutations are in cis
			posn_i = 0;
			while (posn_i < num_mutant_indv){
				posn_j = posn_i + 1;
				while (posn_j < num_mutant_indv){
					epi_coeff = epi_coeff + epsilon*dominance*(v_sel_C[posn_i] + v_sel_C[posn_j]);
					posn_j = posn_j + 1;
				}
				posn_i = posn_i + 1;
			}
		}
		if (num_mutant_hap1>0 & num_mutant_hap2>0){ //some mutations are in trans
			posn_i = 0;
			while (posn_i < num_mutant_indv){
				posn_j = posn_i + 1;
				while (posn_j < num_mutant_indv){
					epi_coeff = epi_coeff + epsilon*(v_state[posn_i]/2.0)*v_sel_C[posn_i] + epsilon*(v_state[posn_j]/2.0)*v_sel_C[posn_j]; //this will weight heterozygotes by 0.5 and homozygotes by 1.0
					posn_j = posn_j + 1;
				}
				posn_i = posn_i + 1;
			}
		}
		fitness_gene = fitness_gene + epi_coeff;
		if (fitness_gene >= 0.0){return(fitness_gene);}
		else {return(0.0);}
    }

function (float)additive_site_fitness(integer hap1, integer hap2)
	{
		//get a vector with information on whether genotypes are heterozygous(1), homozygous for mutants (2) or homozygous for A/WT (0)
		posn=0;
		num_mutations=0;
		v_state = c();
		v_sel_C = c();
		hap1_sub = c();
		hap2_sub = c();
		while(posn<L){
			if(hap1[posn]==1 | hap2[posn]==1){ //a mutant is present
				num_mutations = num_mutations + 1;
				hap1_sub = c(hap1_sub, hap1[posn]);
				hap2_sub = c(hap2_sub, hap2[posn]);
				if (hap1[posn]==1 & hap2[posn]==1){ //CC
					v_state = c(v_state, 2);
					v_sel_C = c(v_sel_C, s_C[posn]);
				}
				else{ //AC or CA
					v_state = c(v_state, 1);
					v_sel_C = c(v_sel_C, s_C[posn]);
				}
			}
			posn = posn + 1;
		}
		//calculate direct fitness cost:
		fitness_add_site = 1.0;
		posn = 0;
		while (posn < num_mutations){
			if (hap1_sub[posn]==1 & hap2_sub[posn]==1){
				fitness_add_site = fitness_add_site + v_sel_C[posn];//CC
			}
			else{
				fitness_add_site = fitness_add_site + dominance*v_sel_C[posn];//AC or CA
			}
			posn = posn + 1;
		}
		//calculate the pairwise epistatic coefficient:
		epi_coeff = 0.0;
		if (num_mutations > 0){ //there is at least one mutation
			posn_i = 0;
			while (posn_i < num_mutations){
				posn_j = posn_i + 1;
				while (posn_j < num_mutations){
					epi_coeff = epi_coeff + epsilon*(v_state[posn_i]/2.0)*v_sel_C[posn_i] + epsilon*(v_state[posn_j]/2.0)*v_sel_C[posn_j]; //this will weight heterozygotes by 0.5 and homozygotes by 1.0
					posn_j = posn_j + 1;
				}
				posn_i = posn_i + 1;
			}
		}
		fitness_add_site = fitness_add_site + epi_coeff;
		if (fitness_add_site >= 0.0){return(fitness_add_site);}
		else {return(0.0);}
}
initialize() {
    //define pop gen parameters:
    defineConstant("fitness_model", d_fitness_model);//"multiplicative"/"additive_site"/ "additive_gene"
    defineConstant("N", 1000);
    defineConstant("sample_size", 50);//50 diploid genomes
    defineConstant("mut_rate_mean", d_mut_rate); //100*1.0e-5);
    defineConstant("rec_rate_mean", d_rec_rate);//fold*1.0e-5
    //defineConstant("rec_rate_mean", d_fold_rec_rate*1.0e-5);

    defineConstant("L", asInteger(d_num_sites));
    defineConstant("mean_gamma", d_mean_gamma);//make sure this is negative, -2 or -20
    defineConstant("s_C", rgamma(L, mean_gamma/(2.0*N), d_beta));
    print(s_C);
    defineConstant("s_A", 0.0);
    defineConstant("dominance", d_dom);//h=0.5 or 0.2
    defineConstant("epsilon", d_epsilon);
    
    initializeSLiMOptions(nucleotideBased=T);
    initializeAncestralNucleotides(randomNucleotides(L, basis = c(1,0,0,0), format = "string"));
    initializeMutationTypeNuc("m1", 0.5, "f", 0.0);//the dominance here doesn't matter because we define fitness in our custom functions
    mm = matrix(c(0,mut_rate_mean/2,0,0, mut_rate_mean/2,0,0,0, 0,0,0,0, 0,0,0,0), ncol=4);
    
    initializeGenomicElementType("g1", m1, 1.0, mutationMatrix=mm);
    initializeGenomicElement(g1, 0, L-1);
    initializeRecombinationRate(rec_rate_mean);
}
1 early() {
    sim.addSubpop("p1", N);
}
s1 fitnessEffect() {
    hap1 = individual.genome1.nucleotides(0, L-1, format="integer");//A:0; C:1; G:2; T:3
    hap2 = individual.genome2.nucleotides(0, L-1, format="integer");
    
    if (fitness_model=="multiplicative"){
        return(multiplicative_fitness(hap1, hap2));}
    else if (fitness_model=="additive_gene"){
        return(additive_gene_fitness(hap1, hap2));}
    else if (fitness_model=="additive_site"){
        return(additive_site_fitness(hap1, hap2));}
}
1 late(){
	catn("Ancestral genome: " + sim.chromosome.ancestralNucleotides());
	print(g1.mutationMatrix);
}
10000 late() { 
    //print some general summaries:
    catn("Current genome: " + sim.chromosome.ancestralNucleotides());
    catn("Fixed: " + paste(sim.substitutions.nucleotide));
    
    //check:
    indv = p1.sampleIndividuals(1);
    hap1 = indv.genome1.nucleotides(0, L-1, format="integer");
    hap2 = indv.genome2.nucleotides(0, L-1, format="integer");
    print(hap1);
    print(hap2);

    //sample 5 diploid genomes and report summary stats:
    g = p1.sampleIndividuals(5).genomes;
    print(g.nucleotides(start=0, end=0));
    freq_site1 = nucleotideFrequencies(g.nucleotides(start=0, end=0));
    print("freq at site 1:");
    print(freq_site1);
    print(g.nucleotides(start=1, end=1));
    freq_site2 = nucleotideFrequencies(g.nucleotides(start=1, end=1));
    print("freq at site 2:");
    print(freq_site2);
    print("freq of derived allele at site 1: " + freq_site1[1]);
    print("freq of derived allele at site 2: " + freq_site2[1]);
	
    //print mean fitness
    v_popn_fitness = get_mean_variance_fitness(p1);
    mean_fitness = v_popn_fitness[0];
    var_fitness = v_popn_fitness[1];
    print("variance in fitness: " + var_fitness);
    print("genetic load: " + asFloat(1.0 - asFloat(mean_fitness)));    
    writeFile(filePath=d_folder + "/output" + d_repID + ".txt", contents=paste0("variance in fitness: ", var_fitness), append=F);
    writeFile(filePath=d_folder + "/output" + d_repID + ".txt", contents=paste0("genetic load: ", asFloat(1.0 - asFloat(mean_fitness))), append=T);

    //subsample n genomes, make them inbred, and then calcualte their fitness
    //This is to calculate inbreeding load.
    g = p1.sampleIndividuals(sample_size).genomes;
    print("inbreeding load: " + asFloat(mean_fitness - get_inbred_fitness(g)));
    writeFile(filePath=d_folder + "/output" + d_repID + ".txt", contents=paste0("inbreeding load: ", asFloat(mean_fitness - get_inbred_fitness(g))), append=T);
    
    //inbreeding load using a sample to calcualte the mean fitness:
    g_outbred = p1.sampleIndividuals(2*sample_size);
    writeFile(filePath=d_folder + "/output" + d_repID + ".txt", contents=paste0("inbreeding load sample: ", asFloat(get_mean_fitness_of_sample(g_outbred) - get_inbred_fitness(g))), append=T);

    //allele frequencies of the whole population at a random site in the center:
    freq_site_center = nucleotideFrequencies(p1.genomes.nucleotides(start=asInteger(L/2), end=asInteger(L/2))); //this function can only be used to give allele frequencies at a single site
    writeFile(filePath=d_folder + "/output" + d_repID + ".txt", contents=paste0("allele frequency at site: ", asFloat(freq_site_center[1])), append=T); //derived allele frequency at a site in the center
    
    //print out all SNPs in ms files:
    g.outputMS(filePath=d_folder + "/output" + d_repID + ".ms", append=F);
}


